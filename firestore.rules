rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user has admin role
    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'beam_admin';
    }
    
    // Helper function to check if user has partner admin role
    function isPartnerAdmin() {
      return isAuthenticated() && request.auth.token.role == 'partner_admin';
    }
    
    // Helper function to check if user is a musician
    // This checks both custom claims and allows authenticated users
    // (since role might be in user document, not just custom claims)
    function isMusician() {
      return isAuthenticated() && (
        request.auth.token.role == 'musician' || 
        request.auth.token.role == null // Allow authenticated users without role claim
      );
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Organizations - Only BEAM admins can read/write
    match /organizations/{orgId} {
      allow read, write: if isAdmin();
      
      // Allow partner admins to read their own organization
      allow read: if isPartnerAdmin() && 
        request.auth.token.organizationId == orgId;
    }
    
    // Projects - Admins and organization admins can access
    match /projects/{projectId} {
      allow read, write: if isAdmin();
      
      // Allow partner admins to read/write projects for their organization
      allow read, write: if isPartnerAdmin() && 
        resource.data.organizationId == request.auth.token.organizationId;
    }
    
    // Musicians - Admins and the musician themselves
    match /musicians/{musicianId} {
      allow read, write: if isAdmin();
      
      // Allow musicians to read/update their own profile (document ID is their uid)
      allow read, update: if isAuthenticated() && musicianId == request.auth.uid;
      
      // Allow musicians to create their own profile
      allow create: if isAuthenticated() && musicianId == request.auth.uid;
      
      // Allow partner admins to read musicians in their projects
      allow read: if isPartnerAdmin();
    }
    
    // Project Musicians - Admins and organization admins
    match /projectMusicians/{pmId} {
      allow read, write: if isAdmin();
      
      // Allow partner admins to read/write project musicians for their projects
      allow read, write: if isPartnerAdmin() && 
        resource.data.projectId in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.organizationId == request.auth.token.organizationId;
    }
    
    // Pulse Entries - Admins only
    match /pulseEntries/{entryId} {
      allow read, write: if isAdmin();
    }
    
    // Beam Coin Transactions - Admins and musicians
    match /beamCoinTransactions/{transactionId} {
      allow read, write: if isAdmin();
      
      // Allow musicians to read their own transactions
      allow read: if isMusician() && 
        resource.data.musicianId == request.auth.uid;
    }
    
    // Auditions - Admins and organization admins
    match /auditions/{auditionId} {
      allow read, write: if isAdmin();
      
      // Allow partner admins to read/write auditions for their projects
      allow read, write: if isPartnerAdmin() && 
        resource.data.projectId in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.organizationId == request.auth.token.organizationId;
      
      // Allow musicians to read their own auditions
      allow read: if isMusician() && 
        resource.data.musicianId == request.auth.uid;
    }
    
    // Communications - Admins and organization admins
    match /communications/{commId} {
      allow read, write: if isAdmin();
      
      // Allow partner admins to read/write communications for their projects
      allow read, write: if isPartnerAdmin() && 
        resource.data.projectId in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.organizationId == request.auth.token.organizationId;
    }
    
    // Rehearsals - Admins and organization admins
    match /rehearsals/{rehearsalId} {
      allow read, write: if isAdmin();
      
      // Allow partner admins to read/write rehearsals for their projects
      allow read, write: if isPartnerAdmin() && 
        resource.data.projectId in get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.organizationId == request.auth.token.organizationId;
      
      // Allow musicians to read rehearsals for projects they're in
      allow read: if isMusician() && 
        exists(/databases/$(database)/documents/projectMusicians/$(request.auth.uid + '_' + resource.data.projectId));
    }
    
    // Users collection (for custom user data)
    match /users/{userId} {
      allow read, write: if isAdmin();
      
      // Allow users to read/update/create their own data
      allow read, update, create: if isOwner(userId);
    }
    
    // Documents collection (for user documents like W9, contracts, etc.)
    match /documents/{documentId} {
      allow read, write: if isAdmin();
      
      // Allow users to read/update/create their own documents
      allow read, update, create: if isAuthenticated() && documentId == request.auth.uid;
    }
    
    // Verifications collection (for user verification status)
    match /verifications/{verificationId} {
      allow read, write: if isAdmin();
      
      // Allow users to read/create their own verification records
      allow read, create: if isAuthenticated() && verificationId == request.auth.uid;
      
      // Allow users to update their own verification records
      allow update: if isAuthenticated() && verificationId == request.auth.uid;
    }
    
    // Donations collection (public read, admin write)
    match /donations/{donationId} {
      allow read: if true; // Allow public read access for donation listings
      allow write: if isAdmin(); // Only admins can write donations (usually via API/webhook)
    }
    
    // Default deny rule for any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
