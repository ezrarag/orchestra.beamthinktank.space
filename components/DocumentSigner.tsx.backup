'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { X, FileCheck, Send } from 'lucide-react'

interface W9FormData {
  legalName: string
  businessName: string
  address: string
  city: string
  state: string
  zip: string
  email: string
  taxClassification: string
  tinSsn: string
  signature: string
  signatureDate: string
}

interface DocumentSignerProps {
  isOpen: boolean
  onClose: () => void
  documentType: 'w9' | 'contract' | 'mediaRelease'
  musicianName: string
  musicianEmail: string
}

export default function DocumentSigner({ isOpen, onClose, documentType, musicianName, musicianEmail }: DocumentSignerProps) {
  const [formData, setFormData] = useState<Partial<W9FormData>>({
    legalName: musicianName,
    businessName: '',
    email: musicianEmail,
    taxClassification: 'individual',
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitted, setSubmitted] = useState(false)
  const [tinDisplay, setTinDisplay] = useState('')

  const documentTitles = {
    w9: 'W-9 Contractor Information Form',
    contract: 'Performance Contract',
    mediaRelease: 'Media Release Agreement'
  }

  const handleInputChange = (field: keyof W9FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleTinChange = (value: string) => {
    // Format as XXX-XX-XXXX or XX-XXXXXXX for EIN
    const numbers = value.replace(/\D/g, '')
    let formatted = numbers
    
    if (numbers.length <= 2) {
      formatted = numbers
    } else if (numbers.length <= 9) {
      // Format as SSN
      formatted = numbers.slice(0, 3) + '-' + numbers.slice(3, 5) + '-' + numbers.slice(5, 9)
    } else {
      // Format as EIN
      formatted = numbers.slice(0, 2) + '-' + numbers.slice(2, 9)
    }
    
    setTinDisplay(formatted)
    setFormData(prev => ({ ...prev, tinSsn: numbers }))
  }

  const handleSignature = (signature: string) => {
    setFormData(prev => ({ 
      ...prev, 
      signature, 
      signatureDate: new Date().toISOString().split('T')[0] 
    }))
  }

  const handleSubmit = async () => {
    setIsSubmitting(true)
    
    try {
      // Create PDF document
      const pdfData = await generateW9PDF(formData as W9FormData)
      
      // Upload to Firebase Storage
      const downloadUrl = await uploadToFirebase(documentType, pdfData, musicianName)
      
      // Send email notification
      await sendEmailNotification(documentType, musicianName, musicianEmail, downloadUrl)
      
      // Save metadata to Firestore
      await saveDocumentMetadata(documentType, downloadUrl, musicianEmail)
      
      setSubmitted(true)
    } catch (error) {
      console.error('Error submitting document:', error)
      alert('Error submitting document. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  const generateW9PDF = async (data: W9FormData): Promise<Blob> => {
    // This would use a library like jsPDF or pdf-lib to generate the PDF
    // For now, we'll create a simple form that can be printed/exported
    const htmlContent = generateW9HTML(data)
    
    // Return as blob for now - in production, use proper PDF generation
    return new Blob([htmlContent], { type: 'text/html' })
  }

  const generateW9HTML = (data: W9FormData): string => {
    const formattedTIN = data.tinSsn?.length === 9 
      ? `${data.tinSsn.slice(0, 3)}-${data.tinSsn.slice(3, 5)}-${data.tinSsn.slice(5, 9)}`
      : data.tinSsn || ''
    
    return `
<!DOCTYPE html>
<html>
<head>
  <title>W-9 Form for ${data.legalName}</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto; }
    .form-field { margin: 10px 0; }
    .label { font-weight: bold; display: inline-block; width: 180px; }
    .signature-field { border-top: 1px solid #333; padding-top: 10px; margin-top: 30px; }
    .footer { margin-top: 30px; font-size: 10px; color: #666; }
  </style>
</head>
<body>
  <h2>Form W-9 (Request for Taxpayer Identification Number and Certification)</h2>
  
  <div class="form-field">
    <span class="label">Legal Name:</span> ${data.legalName || ''}
  </div>
  ${data.businessName ? `
  <div class="form-field">
    <span class="label">Business Name:</span> ${data.businessName}
  </div>
  ` : ''}
  <div class="form-field">
    <span class="label">Address:</span> ${data.address || ''}
  </div>
/new_code>
<strong>Your changes have been applied successfully. The file components/DocumentSigner.tsx has been updated with W-9 contractor information form fields.</strong>